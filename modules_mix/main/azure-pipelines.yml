# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

pool:
  vmImage: ubuntu-latest

# variables:
  # backendsarg: 'modulesdemorg'
  # backendsa: 'moduledemostorage09'
  # backendsactr: 'modulesdemo'
  # backendsakey: 'dev.terraform.tfstate'
  # group: internaldemodev

stages:
  - stage: tfvalidate
    jobs:
      - job: validate
        continueOnError: false
        steps:
        - task: TerraformInstaller@1
          inputs:
            terraformVersion: 'latest'
        - task: TerraformTaskV4@4
          displayName: 'init'
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)/main'
            backendServiceArm: 'terraform'
            backendAzureRmResourceGroupName: '$(backendsarg)'
            backendAzureRmStorageAccountName: '$(backendsa)'
            backendAzureRmContainerName: '$(backendsactr)'
            backendAzureRmKey: '$(backendsakey)'
        - task: TerraformTaskV4@4
          displayName: 'validate'
          inputs:
            provider: 'azurerm'
            command: 'validate'
            workingDirectory: '$(System.DefaultWorkingDirectory)/main'
  - stage: tfdeploy
    condition: succeeded('tfvalidate')
    dependsOn: tfvalidate
    jobs:
      - job: apply
        steps:
          - task: TerraformInstaller@1
            displayName: 'tfinstall'
            inputs:
              terraformVersion: 'latest'
          - task: TerraformTaskV4@4
            displayName: 'init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/main'
              backendServiceArm: 'terraform'
              backendAzureRmResourceGroupName: '$(backendsarg)'
              backendAzureRmStorageAccountName: '$(backendsa)'
              backendAzureRmContainerName: '$(backendsactr)'
              backendAzureRmKey: '$(backendsakey)'
          - task: TerraformTaskV4@4
            displayName: 'plan'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(System.DefaultWorkingDirectory)/main'
              environmentServiceNameAzureRM: 'terraform'
          - task: TerraformTaskV4@4
            displayName: 'apply'
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)/main'
              environmentServiceNameAzureRM: 'terraform'